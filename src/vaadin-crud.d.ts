/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/vaadin-crud.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.

import {PolymerElement} from '@polymer/polymer/polymer-element.js';

import {ThemableMixin} from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';

import {ElementMixin} from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';

import {html} from '@polymer/polymer/lib/utils/html-tag.js';

import {FlattenedNodesObserver} from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';

import {afterNextRender} from '@polymer/polymer/lib/utils/render-status.js';

/**
 * `<vaadin-crud>` is a Web Component for [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) operations.
 *
 * ### Quick Start
 *
 * Assign an array to the [`items`](#/elements/vaadin-crud#property-items) property.
 *
 * A grid and an editor will be automatically generated and configured based on the data structure provided.
 *
 * #### Example:
 * ```html
 * <vaadin-crud items='[{"name": "John", "surname": "Lennon", "role": "singer"},
 *                      {"name": "Ringo", "surname": "Starr", "role": "drums"}]'></vaadin-crud>
 * ```
 *
 * ### Data Provider Function
 *
 * Otherwise, you can provide a [`dataProvider`](#/elements/vaadin-crud#property-dataProvider) function.
 * #### Example:
 * ```html
 * <vaadin-crud></vaadin-crud>
 * ```
 * ```js
 * const crud = document.querySelector('vaadin-crud');
 * const users = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'}, ...];
 * crud.dataProvider = function(params, callback) {
 *   const chunk = users.slice(params.page * params.pageSize, params.page * params.pageSize + params.pageSize);
 *   callback(chunk, people.length);
 * };
 * ```
 *
 * NOTE: The autogenerated editor only supports string types. If you need to handle special cases
 * customizing the editor is discussed below.
 *
 * ### Customization
 *
 * Alternatively you can fully configure the component by using `slot` names.
 *
 * Slot name | Description
 * ----------------|----------------
 * `grid` | To replace the autogenerated grid with a custom one.
 * `form` | To replace the autogenerated form.
 * `toolbar` | To replace the toolbar content. Add an element with the attribure `new-button` for the new item action.
 *
 * #### Example:
 * ```html
 * <vaadin-crud items='[{"name": "John", "surname": "Lennon", "role": "singer"},
 *                      {"name": "Ringo", "surname": "Starr", "role": "drums"}]'>
 *
 *  <vaadin-grid slot="grid">
 *   <vaadin-crud-edit-column></vaadin-crud-edit-column>
 *   <vaadin-grid-column>
 *    <template class="header">Name</template><template>[[item.name]]</template>
 *   </vaadin-grid-column>
 *   <vaadin-grid-column>
 *    <template class="header">Surname</template><template>[[item.surname]]</template>
 *   </vaadin-grid-column>
 *  </vaadin-grid>
 *
 *  <vaadin-form-layout slot="form">
 *   <vaadin-text-field label="First" path="name"></vaadin-text-field>
 *   <vaadin-text-field label="Surname" path="surname"></vaadin-text-field>
 *  </vaadin-form-layout>
 *
 *  <div slot="footer">Total singers: [[size]]</div>
 *
 *  <button slot="new">New singer</button>
 * </vaadin-crud>
 * ```
 *
 * ### Helpers
 *
 * The following elements are used to autoconfigure the grid and the editor
 * - [`<vaadin-crud-grid>`](#/elements/vaadin-crud-grid)
 * - [`<vaadin-crud-edit-column>`](#/elements/vaadin-crud-edit-column)
 * - [`<vaadin-crud-form>`](#/elements/vaadin-crud-form)
 *
 * ### Styling
 *
 * The following shadow DOM parts are available for styling:
 *
 * Part name | Description
 * ----------------|----------------
 * `toolbar` | Toolbar container at the bottom. By default it contains the the `new` button
 *
 * The following custom properties are available:
 *
 * Custom Property | Description | Default
 * ----------------|----------------
 * --vaadin-crud-editor-max-height | max height of editor when opened on the bottom | 40%
 * --vaadin-crud-editor-max-width | max width of editor when opened on the side | 40%
 *
 * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
 */
declare class CrudElement extends
  ElementMixin(
  ThemableMixin(
  PolymerElement)) {

  /**
   * A reference to all fields inside the [`_form`](#/elements/vaadin-crud#property-_form) element
   */
  readonly _fields: HTMLElement[];

  /**
   * An array containing the items which will be stamped to the column template instances.
   */
  items: CrudItem[]|null|undefined;

  /**
   * The item being edited in the dialog.
   */
  editedItem: CrudItem|null|undefined;

  /**
   * Sets how editor will be presented on desktop screen.
   *
   * Accepted values are:
   *   - `` (default) - form will open as overlay
   *   - `bottom` - form will open below the grid
   *   - `aside` - form will open on the grid side (_right_, if lft and _left_ if rtl)
   * @attr {bottom|aside} editor-position
   */
  editorPosition: CrudEditorPosition;

  /**
   * Enables user to click on row to edit it.
   * Note: When enabled, autogenerated grid won't show the edit column.
   * @attr {boolean} edit-on-click
   */
  editOnClick: boolean;

  /**
   * Function that provides items lazily. Receives arguments `params`, `callback`
   *
   * `params.page` Requested page index
   * `params.pageSize` Current page size
   * `params.filters` Currently applied filters
   * `params.sortOrders` Currently applied sorting orders
   *
   * `callback(items, size)` Callback function with arguments:
   *   - `items` Current page of items
   *   - `size` Total number of items
   */
  dataProvider: CrudDataProvider|null|undefined;

  /**
   * Disable filtering when grid is autoconfigured.
   * @attr {boolean} no-filter
   */
  noFilter: boolean|null|undefined;

  /**
   * Disable sorting when grid is autoconfigured.
   * @attr {boolean} no-sort
   */
  noSort: boolean|null|undefined;

  /**
   * Remove grid headers when it is autoconfigured.
   * @attr {boolean} no-head
   */
  noHead: boolean|null|undefined;

  /**
   * A comma-separated list of fields to include in the generated grid and the generated editor.
   *
   * It can be used to explicitly define the field order.
   *
   * When it is defined [`exclude`](#/elements/vaadin-crud#property-exclude) is ignored.
   *
   * Default is undefined meaning that all properties in the object should be mapped to fields.
   */
  include: string|null|undefined;

  /**
   * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
   *
   * When [`include`](#/elements/vaadin-crud#property-include) is defined, this parameter is ignored.
   *
   * Default is to exclude all private fields (those properties starting with underscore)
   */
  exclude: string|null|undefined;

  /**
   * Reflects the opened status of the editor.
   */
  editorOpened: boolean|null|undefined;

  /**
   * Number of items in the data set which is reported by the grid.
   * Typically it reflects the number of filtered items displayed in the grid.
   */
  readonly size: number|null|undefined;

  /**
   * The object used to localize this component.
   * For changing the default localization, change the entire
   * _i18n_ object or just the property you want to modify.
   *
   * The object has the following JSON structure and default values:
   *
   *         {
   *           newItem: 'New item',
   *           editItem: 'Edit item',
   *           saveItem: 'Save',
   *           cancel: 'Cancel',
   *           deleteItem: 'Delete...',
   *           editLabel: 'Edit',
   *           confirm: {
   *             delete: {
   *               title: 'Confirm delete',
   *               content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
   *               button: {
   *                 confirm: 'Delete',
   *                 dismiss: 'Cancel'
   *               }
   *             },
   *             cancel: {
   *               title: 'Unsaved changes',
   *               content: 'There are unsaved modifications to the item.',
   *               button: {
   *                 confirm: 'Discard',
   *                 dismiss: 'Continue editing'
   *               }
   *             }
   *           }
   *         }
   */
  i18n: CrudI18n;
  static _finalizeClass(): void;
  ready(): void;
}

declare global {

  interface HTMLElementTagNameMap {
    "vaadin-crud": CrudElement;
  }
}

export {CrudElement};

import {CrudItem} from '../@types/interfaces';

import {CrudEditorPosition} from '../@types/interfaces';

import {CrudDataProvider} from '../@types/interfaces';

import {CrudI18n} from '../@types/interfaces';
